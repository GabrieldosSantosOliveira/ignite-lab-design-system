{"version":3,"file":"TextInput.647596b4.js","sources":["../../node_modules/phosphor-react/dist/icons/Envelope.esm.js","../../node_modules/react-hook-form/dist/index.esm.mjs","../../src/components/TextInput.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport { renderPathForWeight } from '../lib/index.esm.js';\nimport IconBase from '../lib/IconBase.esm.js';\n\n/* GENERATED FILE */\nvar pathsByWeight = /*#__PURE__*/new Map();\npathsByWeight.set(\"bold\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"polyline\", {\n    points: \"224 56 128 144 32 56\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"path\", {\n    d: \"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56a0,0,0,0,1,0,0Z\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"line\", {\n    x1: \"110.5\",\n    y1: \"128\",\n    x2: \"34.5\",\n    y2: \"197.7\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"line\", {\n    x1: \"221.5\",\n    y1: \"197.7\",\n    x2: \"145.5\",\n    y2: \"128\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }));\n});\npathsByWeight.set(\"duotone\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"polygon\", {\n    points: \"224 56 128 144 32 56 224 56\",\n    opacity: \"0.2\"\n  }), React.createElement(\"polyline\", {\n    points: \"224 56 128 144 32 56\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"path\", {\n    d: \"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"110.5\",\n    y1: \"128\",\n    x2: \"34.5\",\n    y2: \"197.7\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"221.5\",\n    y1: \"197.7\",\n    x2: \"145.5\",\n    y2: \"128\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }));\n});\npathsByWeight.set(\"fill\", function () {\n  return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    d: \"M224,48H32a8,8,0,0,0-8,8V192a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A8,8,0,0,0,224,48ZM98.7,128,40,181.8V74.2Zm11.8,10.9,12.1,11a8,8,0,0,0,10.8,0l12.1-11L203.4,192H52.6ZM157.3,128,216,74.2V181.8Z\"\n  }));\n});\npathsByWeight.set(\"light\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"polyline\", {\n    points: \"224 56 128 144 32 56\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"path\", {\n    d: \"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"line\", {\n    x1: \"110.5\",\n    y1: \"128\",\n    x2: \"34.5\",\n    y2: \"197.7\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"line\", {\n    x1: \"221.5\",\n    y1: \"197.7\",\n    x2: \"145.5\",\n    y2: \"128\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }));\n});\npathsByWeight.set(\"thin\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"polyline\", {\n    points: \"224 56 128 144 32 56\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"path\", {\n    d: \"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"line\", {\n    x1: \"110.5\",\n    y1: \"128\",\n    x2: \"34.5\",\n    y2: \"197.7\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"line\", {\n    x1: \"221.5\",\n    y1: \"197.7\",\n    x2: \"145.5\",\n    y2: \"128\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }));\n});\npathsByWeight.set(\"regular\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"polyline\", {\n    points: \"224 56 128 144 32 56\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"path\", {\n    d: \"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"110.5\",\n    y1: \"128\",\n    x2: \"34.5\",\n    y2: \"197.7\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"221.5\",\n    y1: \"197.7\",\n    x2: \"145.5\",\n    y2: \"128\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }));\n});\n\nvar renderPath = function renderPath(weight, color) {\n  return renderPathForWeight(weight, color, pathsByWeight);\n};\n\nvar Envelope = /*#__PURE__*/forwardRef(function (props, ref) {\n  return React.createElement(IconBase, Object.assign({\n    ref: ref\n  }, props, {\n    renderPath: renderPath\n  }));\n});\nEnvelope.displayName = \"Envelope\";\n\nexport default Envelope;\n//# sourceMappingURL=Envelope.esm.js.map\n","import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\r\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\r\n    const result = {\r\n        defaultValues: control._defaultValues,\r\n    };\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.callback,\r\n            });\r\n        return () => {\r\n            subscription && subscription.unsubscribe();\r\n        };\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _mounted = React.useRef(true);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        callback: React.useCallback((value) => _mounted.current &&\r\n            shouldSubscribeByName(_name.current, value.name, exact) &&\r\n            shouldRenderFormState(value, _localProxyFormState.current) &&\r\n            updateFormState({\r\n                ...control._formState,\r\n                ...value,\r\n            }), [control, exact]),\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => {\r\n        _mounted.current = true;\r\n        return () => {\r\n            _mounted.current = false;\r\n        };\r\n    }, []);\r\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\r\n    const isArray = Array.isArray(names);\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names);\r\n    }\r\n    if (isArray) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\r\n            get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        callback: React.useCallback((formState) => {\r\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n                const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\r\n                updateValue(isUndefined(_name.current) ||\r\n                    (isObject(fieldValues) && !objectHasFunction(fieldValues))\r\n                    ? { ...fieldValues }\r\n                    : Array.isArray(fieldValues)\r\n                        ? [...fieldValues]\r\n                        : isUndefined(fieldValues)\r\n                            ? defaultValue\r\n                            : fieldValues);\r\n            }\r\n        }, [control, exact, defaultValue]),\r\n    });\r\n    const [value, updateValue] = React.useState(isUndefined(defaultValue)\r\n        ? control._getWatch(name)\r\n        : defaultValue);\r\n    React.useEffect(() => control._removeUnmounted());\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n    }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\r\n                target: {\r\n                    value: getEventValue(event),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.CHANGE,\r\n            }), [name]),\r\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\r\n                target: {\r\n                    value: get(control._formValues, name),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.BLUR,\r\n            }), [name, control]),\r\n            ref: (elm) => {\r\n                const field = get(control._fields, name);\r\n                if (field && elm) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        select: () => elm.select(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            },\r\n        },\r\n        formState,\r\n        fieldState: Object.defineProperties({}, {\r\n            invalid: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.errors, name),\r\n            },\r\n            isDirty: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.dirtyFields, name),\r\n            },\r\n            isTouched: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.touchedFields, name),\r\n            },\r\n            error: {\r\n                enumerable: true,\r\n                get: () => get(formState.errors, name),\r\n            },\r\n        }),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus) {\r\n                    _f.ref.focus();\r\n                    break;\r\n                }\r\n                else if (_f.refs && _f.refs[0].focus) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                focusFieldBy(currentField, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\r\n    const fieldArrayErrors = compact(get(errors, name));\r\n    set(fieldArrayErrors, 'root', error[name]);\r\n    set(errors, name, fieldArrayErrors);\r\n    return errors;\r\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (isFieldArray\r\n        ? !Array.isArray(inputValue) || !inputValue.length\r\n        : required &&\r\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n                (isBoolean(inputValue) && !inputValue) ||\r\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n                (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber ||\r\n                (inputValue ? +inputValue : inputValue);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) &&\r\n        !isEmpty &&\r\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nvar isPlainObject = (tempObject) => {\r\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\r\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\r\n};\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : {};\r\n        if (!Array.isArray(data) && !isPlainObject(data)) {\r\n            copy = data;\r\n        }\r\n        else {\r\n            for (const key in data) {\r\n                copy[key] = cloneObject(data[key]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction isEmptyArray(obj) {\r\n    for (const key in obj) {\r\n        if (!isUndefined(obj[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) && isEmptyArray(objectRef)))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    props.rules &&\r\n        control.register(name, props.rules);\r\n    const callback = React.useCallback(({ values, name: fieldArrayName, }) => {\r\n        if (fieldArrayName === _name.current || !fieldArrayName) {\r\n            const fieldValues = get(values, _name.current, []);\r\n            setFields(fieldValues);\r\n            ids.current = fieldValues.map(generateId);\r\n        }\r\n    }, []);\r\n    useSubscribe({\r\n        callback,\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current &&\r\n            (!getValidationModes(control._options.mode).isOnSubmit ||\r\n                control._formState.isSubmitted)) {\r\n            if (control._options.resolver) {\r\n                control._executeSchema([name]).then((result) => {\r\n                    const error = get(result.errors, name);\r\n                    const existingError = get(control._formState.errors, name);\r\n                    if (existingError ? !error && existingError.type : error && error.type) {\r\n                        error\r\n                            ? set(control._formState.errors, name, error)\r\n                            : unset(control._formState.errors, name);\r\n                        control._subjects.state.next({\r\n                            errors: control._formState.errors,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                const field = get(control._fields, name);\r\n                if (field && field._f) {\r\n                    validateField(field, get(control._formValues, name), control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\r\n                        control._subjects.state.next({\r\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\r\n                        }));\r\n                }\r\n            }\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => key.startsWith(control._names.focus));\r\n        control._names.focus = '';\r\n        control._proxyFormState.isValid && control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar isHTMLElement = (value) => {\r\n    const owner = value ? value.ownerDocument : 0;\r\n    const ElementClass = owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\r\n    return value instanceof ElementClass;\r\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : { ...markFieldsDirty(data[key]) };\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === ''\r\n            ? NaN\r\n            : value\r\n                ? +value\r\n                : value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? undefined\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    let _formState = {\r\n        submitCount: 0,\r\n        isDirty: false,\r\n        isValidating: false,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        touchedFields: {},\r\n        dirtyFields: {},\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = cloneObject(_options.defaultValues) || {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    let validateFields = {};\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback) => (wait) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(callback, wait);\r\n    };\r\n    const _updateValid = async (shouldSkipRender) => {\r\n        let isValid = false;\r\n        if (_proxyFormState.isValid) {\r\n            isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuiltInValidation(_fields, true);\r\n            if (!shouldSkipRender && isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (_proxyFormState.errors &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => {\r\n        set(_formState.errors, name, error);\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let isFieldDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n        if (_proxyFormState.isDirty) {\r\n            const isPreviousFormDirty = _formState.isDirty;\r\n            _formState.isDirty = output.isDirty = _getDirty();\r\n            isFieldDirty = isPreviousFormDirty !== output.isDirty;\r\n        }\r\n        if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\r\n            const isPreviousFieldDirty = get(_formState.dirtyFields, name);\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    isPreviousFieldDirty !== get(_formState.dirtyFields, name);\r\n        }\r\n        if (isBlurEvent && !isPreviousFieldTouched) {\r\n            set(_formState.touchedFields, name, isBlurEvent);\r\n            output.touchedFields = _formState.touchedFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    (_proxyFormState.touchedFields &&\r\n                        isPreviousFieldTouched !== isBlurEvent);\r\n        }\r\n        isFieldDirty && shouldRender && _subjects.state.next(output);\r\n        return isFieldDirty ? output : {};\r\n    };\r\n    const shouldRenderByError = async (name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback = debounce(() => updateErrors(name, error));\r\n            delayErrorCallback(props.delayError);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            delayErrorCallback = null;\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        validateFields[name]--;\r\n        if (_proxyFormState.isValidating &&\r\n            !Object.values(validateFields).some((v) => v)) {\r\n            _subjects.state.next({\r\n                isValidating: false,\r\n            });\r\n            validateFields = {};\r\n        }\r\n    };\r\n    const _executeSchema = async (name) => _options.resolver\r\n        ? await _options.resolver({ ..._formValues }, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation))\r\n        : {};\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f, ...fieldValue } = field;\r\n                if (_f) {\r\n                    const isFieldArrayRoot = _names.array.has(_f.name);\r\n                    const fieldError = await validateField(field, get(_formValues, _f.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation, isFieldArrayRoot);\r\n                    if (fieldError[_f.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    !shouldOnlyCheckValid &&\r\n                        (get(fieldError, _f.name)\r\n                            ? isFieldArrayRoot\r\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\r\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\r\n                            : unset(_formState.errors, _f.name));\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => {\r\n        const fieldValues = {\r\n            ...(_stateFlags.mount\r\n                ? _formValues\r\n                : isUndefined(defaultValue)\r\n                    ? _defaultValues\r\n                    : isString(names)\r\n                        ? { [names]: defaultValue }\r\n                        : defaultValue),\r\n        };\r\n        return generateWatchOutput(names, _names, fieldValues, isGlobal);\r\n    };\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n                delayErrorCallback && delayErrorCallback(0);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            validateFields[name] = validateFields[name] ? +1 : 1;\r\n            _subjects.state.next({\r\n                isValidating: true,\r\n            });\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                isValid = await _updateValid(true);\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _subjects.state.next({\r\n            isValidating: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuiltInValidation(_fields);\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n            isValidating: false,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = {\r\n            ..._defaultValues,\r\n            ...(_stateFlags.mount ? _formValues : {}),\r\n        };\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, {\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (info) => name(_getWatch(undefined, defaultValue), info),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            ...(field || {}),\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return {\r\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\r\n            ...(_options.shouldUseNativeValidation\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(!!Array.isArray(get(_defaultValues, name))\r\n                                            ? [{}]\r\n                                            : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let hasNoPromiseError = true;\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        try {\r\n            if (_options.resolver) {\r\n                const { errors, values } = await _executeSchema();\r\n                _formState.errors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                await executeBuiltInValidation(_fields);\r\n            }\r\n            if (isEmptyObject(_formState.errors)) {\r\n                _subjects.state.next({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                if (onInvalid) {\r\n                    await onInvalid({ ..._formState.errors }, e);\r\n                }\r\n                _options.shouldFocusError &&\r\n                    focusFieldBy(_fields, (key) => get(_formState.errors, key), _names.mount);\r\n            }\r\n        }\r\n        catch (err) {\r\n            hasNoPromiseError = false;\r\n            throw err;\r\n        }\r\n        finally {\r\n            _formState.isSubmitted = true;\r\n            _subjects.state.next({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n                submitCount: _formState.submitCount + 1,\r\n                errors: _formState.errors,\r\n            });\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const _reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues) {\r\n                for (const fieldName of _names.mount) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            try {\r\n                                if (isHTMLElement(fieldReference)) {\r\n                                    fieldReference.closest('form').reset();\r\n                                    break;\r\n                                }\r\n                            }\r\n                            catch (_a) { }\r\n                        }\r\n                    }\r\n                }\r\n                _fields = {};\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.isDirty\r\n                : !!(keepStateOptions.keepDefaultValues &&\r\n                    !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.dirtyFields\r\n                : keepStateOptions.keepDefaultValues && formValues\r\n                    ? getDirtyFields(_defaultValues, formValues)\r\n                    : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\r\n        ? formValues(_formValues)\r\n        : formValues, keepStateOptions);\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const fieldReference = field && field._f;\r\n        if (fieldReference) {\r\n            const fieldRef = fieldReference.refs\r\n                ? fieldReference.refs[0]\r\n                : fieldReference.ref;\r\n            if (fieldRef.focus) {\r\n                fieldRef.focus();\r\n                options.shouldSelect && fieldRef.select();\r\n            }\r\n        }\r\n    };\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to manage the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        submitCount: 0,\r\n        dirtyFields: {},\r\n        touchedFields: {},\r\n        errors: {},\r\n        defaultValues: props.defaultValues,\r\n    });\r\n    if (!_formControl.current) {\r\n        _formControl.current = {\r\n            ...createFormControl(props),\r\n            formState,\r\n        };\r\n    }\r\n    const control = _formControl.current.control;\r\n    control._options = props;\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        callback: React.useCallback((value) => {\r\n            if (shouldRenderFormState(value, control._proxyFormState, true)) {\r\n                control._formState = {\r\n                    ...control._formState,\r\n                    ...value,\r\n                };\r\n                updateFormState({ ...control._formState });\r\n            }\r\n        }, [control]),\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._proxyFormState.isValid && control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    _formControl.current.formState = getProxyFormState(formState, control);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import { Slot } from '@radix-ui/react-slot';\nimport React from 'react';\nimport { UseFormRegister } from 'react-hook-form';\nexport type TextInputInputProps =\n  React.InputHTMLAttributes<HTMLInputElement> &\n    ReturnType<\n      UseFormRegister<{\n        [key: string]: unknown;\n      }>\n    >;\n\nexport interface TextInputRootProps {\n  children: React.ReactNode;\n}\nconst TextInputRoot: React.FC<TextInputRootProps> = ({\n  children\n}) => {\n  return (\n    <div className=\"flex items-center gap-3 py-4 px-3 h-12 rounded bg-gray-800 w-full focus-within:ring-2 ring-cyan-300 \">\n      {children}\n    </div>\n  );\n};\nTextInputRoot.displayName = 'TextInput.Root';\n\nexport interface TextInputIconProps {\n  children: React.ReactNode;\n}\nconst TextInputIcon: React.FC<TextInputIconProps> = ({\n  children\n}) => {\n  return (\n    <>\n      <Slot className=\"w-6 h-6 text-gray-400\">\n        {children}\n      </Slot>\n    </>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\nconst TextInputInput = React.forwardRef<\n  HTMLInputElement,\n  TextInputInputProps\n>(({ ...props }, ref) => {\n  return (\n    <input\n      className=\"outline-none bg-transparent flex-1 text-gray-100 text-xs placeholder:text-gray-400\"\n      {...props}\n      ref={ref}\n    />\n  );\n});\nTextInputInput.displayName = 'TextInput.Input';\n\nexport const TextInput = {\n  Root: TextInputRoot,\n  Input: TextInputInput,\n  Icon: TextInputIcon\n};\n"],"names":["pathsByWeight","Map","set","color","_jsxs","_Fragment","_jsx","renderPath","__name","weight","renderPathForWeight","Envelope","forwardRef","props","ref","IconBase","Object","assign","displayName","Envelope$1","isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","has","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","React","createContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","useSubscribe","_props","useRef","current","useEffect","subscription","disabled","subject","subscribe","next","callback","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isFunction","objectHasFunction","data","appendErrors","validateAllFieldCriteria","errors","message","types","isKey","test","stringToPath","input","replace","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","currentField","focus","refs","isWatched","isBlurEvent","some","watchName","startsWith","slice","updateFieldArrayRootError","error","fieldArrayErrors","isBoolean","isFileInput","isMessage","isValidElement","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","inputValue","shouldUseNativeValidation","isFieldArray","valueAsNumber","mount","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","valueAsDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","copy","Set","Blob","FileList","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","baseGet","updatePath","isEmptyArray","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isHTMLElement","owner","ownerDocument","ElementClass","defaultView","isMultipleSelect","live","isConnected","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","_options","_formState","submitCount","isDirty","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","_formValues","shouldUnregister","_stateFlags","action","unMount","array","delayErrorCallback","timer","validateFields","_subjects","state","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuiltInValidation","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","v","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","shouldFocus","getFieldState","invalid","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","fieldRef","querySelectorAll","radioOrCheckbox","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","shouldSelect","select","useForm","_formControl","updateFormState","useState","useCallback","TextInputRoot","children","TextInputIcon","Slot","TextInputInput","TextInput","Root","Input","Icon"],"mappings":"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"}